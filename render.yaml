services:
  - type: web
    name: music-recommendations
    env: python
    plan: free
    # Optimize build process to prevent timeouts
    buildCommand: |
      echo "=== Starting Build Process ===" &&
      pip install --upgrade pip &&
      echo "=== Installing Core Dependencies ===" &&
      pip install --no-cache-dir Flask==3.0.0 Flask-CORS==4.0.0 gunicorn==21.2.0 &&
      echo "=== Installing Database Dependencies ===" &&
      pip install --no-cache-dir asyncpg>=0.30.0 psycopg2-binary>=2.9.7 &&
      echo "=== Installing Data Processing ===" &&
      pip install --no-cache-dir numpy>=1.26.0 pandas>=2.1.0 &&
      echo "=== Installing ML Dependencies ===" &&
      pip install --no-cache-dir torch>=2.1.2 --index-url https://download.pytorch.org/whl/cpu &&
      pip install --no-cache-dir sentence-transformers>=2.3.0 &&
      echo "=== Installing Utilities ===" &&
      pip install --no-cache-dir kaggle>=1.6.0 python-dotenv>=1.0.0 &&
      echo "=== Pre-downloading Model (to avoid timeout on first request) ===" &&
      python -c "
      import os; 
      os.makedirs('/tmp/sentence_transformers', exist_ok=True);
      os.environ['SENTENCE_TRANSFORMERS_HOME'] = '/tmp/sentence_transformers';
      from sentence_transformers import SentenceTransformer; 
      print('Downloading model...'); 
      model = SentenceTransformer('sentence-transformers/all-MiniLM-L12-v1', cache_folder='/tmp/sentence_transformers'); 
      print(f'Model loaded with {model.get_sentence_embedding_dimension()} dimensions')
      " &&
      echo "=== Verifying Installation ===" &&
      python -c "
      import psycopg2; print('✓ psycopg2 imported');
      import asyncpg; print('✓ asyncpg imported');
      import torch; print('✓ torch imported');
      from sentence_transformers import SentenceTransformer; print('✓ sentence-transformers imported');
      print('=== Build Complete ===')
      "
    
    # Optimized start command with proper timeout and preloading
    startCommand: |
      echo "=== Starting Application ===" &&
      echo "Port: $PORT" &&
      echo "Environment: $FLASK_ENV" &&
      gunicorn --bind 0.0.0.0:$PORT app:app \
        --workers 1 \
        --timeout 120 \
        --worker-class sync \
        --preload \
        --worker-connections 100 \
        --max-requests 100 \
        --max-requests-jitter 10 \
        --log-level info
    
    envVars:
      # Python Configuration
      - key: PYTHON_VERSION
        value: "3.11.0"
      - key: PYTHONUNBUFFERED
        value: "1"
      - key: PYTHONDONTWRITEBYTECODE
        value: "1"
      
      # Database Configuration
      - key: DATABASE_URL
        fromDatabase:
          name: music-recommendations-db
          property: connectionString
      
      # Flask Configuration
      - key: FLASK_ENV
        value: production
      - key: FLASK_DEBUG
        value: "false"
      - key: SECRET_KEY
        generateValue: true
      
      # Model Configuration
      - key: SENTENCE_TRANSFORMER_MODEL
        value: sentence-transformers/all-MiniLM-L12-v1
      - key: MODEL_CACHE_DIR
        value: /tmp/sentence_transformers
      
      # Application Configuration
      - key: DEFAULT_RECOMMENDATION_LIMIT
        value: "5"
      - key: MAX_RECOMMENDATION_LIMIT
        value: "10"
      - key: LOG_LEVEL
        value: INFO
      
      # Database Pool Configuration (optimized for 512MB RAM)
      - key: DB_MIN_POOL_SIZE
        value: "1"
      - key: DB_MAX_POOL_SIZE
        value: "2"
      - key: DB_COMMAND_TIMEOUT
        value: "60"
      
      # Server Configuration
      - key: HOST
        value: "0.0.0.0"
      
      # Render Platform Detection
      - key: RENDER
        value: "true"
      
      # Optional Kaggle Credentials (set these manually if needed)
      - key: KAGGLE_USERNAME
        sync: false
      - key: KAGGLE_KEY
        sync: false

databases:
  - name: music-recommendations-db
    databaseName: music_recommendations
    user: music_user
    plan: free
    postgresMajorVersion: 15
    # Ensure pgvector extension is available
    preDeployCommand: |
      echo "=== Setting up PostgreSQL with pgvector ===" &&
      psql $DATABASE_URL -c "CREATE EXTENSION IF NOT EXISTS vector;" &&
      echo "=== pgvector extension enabled ==="